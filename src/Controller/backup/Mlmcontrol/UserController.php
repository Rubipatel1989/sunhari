<?phpnamespace App\Controller\Mlmcontrol;use App\Controller\AppController;use Cake\Core\Configure;use Cake\Network\Exception\ForbiddenException;use Cake\Network\Exception\NotFoundException;use Cake\View\Exception\MissingTemplateException;use Cake\ORM\TableRegistry;use Cake\Network\Session\DatabaseSession;use Cake\Controller\Component\FlashComponent;use Cake\Datasource\ConnectionManager;use Cake\Mailer\Email;class UserController extends AppController{    public function login()    {        if ($this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/dashboard');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Login";        $this->set("title", $title);        if ($this->request->is("post")) {            /*echo '<pre>';            print_r($this->request->getData('User'));exit;*/            $usersTable = TableRegistry::get("Users");            $userInfo = $usersTable                ->find("all", [                    "conditions" => [                        "Users.username" =>                            $this->request->getData('User')["username"],                        "Users.password" => md5(                            $this->request->getData('User')["password"]                        ),                        "Users.role_id !=" => 2,                        "Users.status" => 1,                        "Users.is_blocked IS NULL",                    ],                ])                ->first();            if (!empty($userInfo)) {                $this->request->getSession()->write("adminUserId", $userInfo->id);                return $this->redirect($this->backend_url.'/user/dashboard');            } else {                $this->Flash->error(                    __("Entered username or password is wrong.")                );            }        }    }    public function dashboard()    {        $prefix_title = $this->backendTitle;        //print_r($this->adminUserId);exit;        $title = $prefix_title . " Dashboard";        $this->set("title", $title);        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $walletsTable = TableRegistry::get("Wallets");        $usersTable = TableRegistry::get("Users");        $fundrequestsTable = TableRegistry::get("Fundrequests");        $ticketsTable = TableRegistry::get("Tickets");        $conditions = [            "Wallets.status" => 0,        ];        $join = [            [                "table" => "users",                "alias" => "Users",                "type" => "INNER",                "conditions" => ["Users.id = Wallets.user_id"],            ],            [                "table" => "details",                "alias" => "Details",                "type" => "INNER",                "conditions" => ["Details.user_id = Users.id"],            ],            [                "table" => "users",                "alias" => "Payer",                "type" => "INNER",                "conditions" => ["Payer.id = Wallets.transfer_by"],            ],        ];        $order = ["Wallets.id" => "DESC"];        $fields = [            "Users.id",            "Users.username",            "Payer.id",            "Payer.username",            "Details.id",            "Details.first_name",            "Details.middle_name",            "Details.last_name",        ];        $wallets = $walletsTable            ->find("all", [                "fields" => $fields,                "conditions" => $conditions,                "join" => $join,                "order" => $order,            ])            ->toArray();        $this->set("wallets", $wallets);        $adminStatistics = $usersTable->getAdminStatistics();        $this->set("adminStatistics", $adminStatistics);        $conditions = [            "Fundrequests.status" => 0,        ];        $order = [            "Fundrequests.id" => "DESC",        ];        $join = [            [                "table" => "users",                "alias" => "Users",                "type" => "INNER",                "conditions" => ["Users.id = Fundrequests.user_id"],            ],            [                "table" => "attachments",                "alias" => "Attachments",                "type" => "LEFT",                "conditions" => [                    'Attachments.reference_id = Users.id and Attachments.reference_type = "profile_photo"',                ],            ],        ];        $group = [" Fundrequests.id"];        $fields = [            "Users.id",            "Users.username",            "Attachments.id",            "Attachments.file",        ];        $fundrequests = $fundrequestsTable            ->find("all", [                "fields" => $fields,                "conditions" => $conditions,                "order" => $order,                "join" => $join,                "group" => $group,                "limit" => 5,            ])            ->toArray();        $this->set("fundrequests", $fundrequests);        $totalPaymentRequest = $fundrequestsTable            ->find("all", [                "fields" => $fields,                "conditions" => $conditions,                "order" => $order,                "join" => $join,                "group" => $group,            ])            ->count();        $this->set("totalPaymentRequest", $totalPaymentRequest);        $conditions = ["Tickets.status" => 0];        $order = ["Tickets.id" => "DESC"];        $join = [            [                "table" => "users",                "alias" => "Users",                "type" => "INNER",                "conditions" => ["Users.id = Tickets.ticket_by"],            ],        ];        $fields = ["Users.id", "Users.username"];        $tickets = $ticketsTable            ->find("all", [                "fields" => $fields,                "conditions" => $conditions,                "join" => $join,                "order" => $order,                "limit" => 5,            ])            ->toArray();        $this->set("tickets", $tickets);        $totalTickets = $ticketsTable            ->find("all", [                "fields" => $fields,                "conditions" => $conditions,                "join" => $join,                "order" => $order,            ])            ->count();        $this->set("totalTickets", $totalTickets);    }    public function accountPassword()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = Configure::read("SITETITLE");        $title = $prefix_title . " Change password : Account Password";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $template = "account_password";        if ($this->request->is("post")) {            //echo '<pre>';            //print_r($this->request->getData());exit;            $postData = $this->request->getData();            $user_id = $this->adminUser->id;            if (isset($postData["btn_account_password"])) {                $userInfo = $usersTable                    ->find("all", [                        "conditions" => [                            "Users.id" => $user_id,                            "Users.password" => md5(                                $postData["User"]["password"]                            ),                        ],                    ])                    ->enableAutoFields(true)                    ->first();                if (!empty($userInfo)) {                    $userData = $usersTable->get($user_id);                    $userData->password = md5(                        $postData["User"]["new_password"]                    );                    if ($usersTable->save($userData)) {                        $this->Flash->success(                            __("Your password has been changed successfully.")                        );                        return $this->redirect($this->backend_url.'/user/account_password');                    }                } else {                    $this->Flash->error(                        __("Your old password did not match to our database.")                    );                }            }        }        $this->render($template);    }    public function transactionPassword()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = Configure::read("SITETITLE");        $title = $prefix_title . " Change password : Transaction Password";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $template = "change_transaction_password";        if ($this->request->is("post")) {            //echo '<pre>';            //print_r($this->request->getData());exit;                        $user_id = $this->adminUser->id;            if (isset($this->request->getData()["btn_account_password"])) {                $userInfo = $usersTable                    ->find("all", [                        "conditions" => [                            "Users.id" => $user_id,                            "Users.transaction_password" => md5(                                $this->request->getData()["User"][                                    "transaction_password"                                ]                            ),                        ],                    ])                    ->enableAutoFields(true)                    ->first();                if (!empty($userInfo)) {                    $userData = $usersTable->get($user_id);                    $userData->transaction_password = md5(                        $this->request->getData()["User"]["new_transaction_password"]                    );                    if ($usersTable->save($userData)) {                        $this->Flash->success(                            __(                                "Your transaction password has been changed successfully."                            )                        );                        return $this->redirect($this->backend_url.'/user/transaction_password');                    }                } else {                    $this->Flash->error(                        __(                            "Your old transaction password did not match to our database."                        )                    );                }            }        }        $this->render($template);    }    public function logout()    {        $this->autoRender = false;        $this->request->getSession()->delete("adminUserId");        return $this->redirect($this->backend_url.'/user/login');    }    public function upgrade()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User : Upgrade";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $packagesTable = TableRegistry::get("Packages");        $upgradesTable = TableRegistry::get("Upgrades");        $downlinesTable = TableRegistry::get("Downlines");        $commissionsTable = TableRegistry::get("Commissions");        $payoutsTable = TableRegistry::get("Payouts");        $join = [            [                "table" => "details",                "alias" => "Details",                "type" => "INNER",                "conditions" => ["Details.user_id = Users.id"],            ],        ];        $conditions = [            "Users.role_id" => 2,            "Users.status NOT IN (2)",        ];        $fields = ["Details.id", "Details.first_name", "Details.last_name"];        $users = $usersTable            ->find("all", [                "fields" => $fields,                "join" => $join,                "conditions" => $conditions,            ])            ->enableAutoFields(true)            ->toArray();        $this->set("users", $users);        $packages = $packagesTable            ->find("all", ["conditions" => ["Packages.status" => 1]])            ->enableAutoFields(true)            ->toArray();        $this->set("packages", $packages);        //$usersTable->updateAchievedRewards(510);        if ($this->request->is("post")) {            /* echo '<pre>';            print_r($this->request->getData());            exit;*/            $postData = $this->request->getData();            if (                !empty($postData["Upgrade"]["package_id"]) &&                $postData["Upgrade"]["upgraded_id"]            ) {                $user_id = $this->adminUser->id;                $upgraded_id = $postData["Upgrade"]["upgraded_id"];                $package = $packagesTable                    ->find("all", [                        "conditions" => [                            "Packages.id" =>                                $postData["Upgrade"]["package_id"],                        ],                    ])                    ->enableAutoFields(true)                    ->first();                $conditions = [                    "Upgrades.upgraded_id" => $upgraded_id,                ];                $order = [                    "Upgrades.id" => "DESC",                ];                $fields = [                    "Upgrades.id",                    "Upgrades.package_amount",                    "Upgrades.package_bv",                    "Upgrades.business_point",                ];                $upgradeInfo = $upgradesTable                    ->find("all", [                        "fields" => $fields,                        "conditions" => $conditions,                        "order" => $order,                    ])                    ->select([                        "upgraded_count" =>                            "(SELECT COUNT(u.id) FROM upgrades u WHERE u.upgraded_id = Upgrades.upgraded_id)",                        "total_bv" =>                            "(SELECT SUM(u.package_bv) FROM upgrades u WHERE u.upgraded_id = Upgrades.upgraded_id)",                    ])                    ->first();                /*echo '<pre>';                print_r($upgradeInfo);                exit;*/                if (empty($package)) {                    $this->Flash->error(                        __(                            "Sorry! selected user has not been upgraded because invalid package is seleted."                        )                    );                } elseif (                    !empty($upgradeInfo) &&                    $upgradeInfo->upgraded_count > 0                ) {                    $this->Flash->error(                        __(                            "Sorry! selected user can not be upgraded because user has already upgraded."                        )                    );                } elseif (                    !empty($upgradeInfo) &&                    $package->package_amount <= $upgradeInfo->package_amount                ) {                    $this->Flash->error(                        __(                            "Sorry! selected user has not been upgraded because package amount should be more than " .                                $upgradeInfo->package_amount .                                "."                        )                    );                } else {                    $package_bv = $package->package_bv;                    if (                        !empty($upgradeInfo) &&                        $upgradeInfo->upgraded_count > 0                    ) {                        $package_bv = $package_bv - $upgradeInfo->total_bv;                    }                    $upgrade = $upgradesTable->newEmptyEntity();                    $upgrade->upgraded_by = $user_id;                    $upgrade->upgraded_id = $upgraded_id;                    $upgrade->package_id = $package->id;                    $upgrade->package_amount = $package->package_amount;                    $upgrade->package_bv = $package_bv;                    if (                        !empty($upgradeInfo) &&                        $upgradeInfo->upgraded_count > 0                    ) {                        $upgrade->business_point = 0;                    } else {                        $upgrade->business_point = $package->business_point;                    }                    $upgrade->roi_amount = $package->roi_amount;                    $upgrade->expiry_date = date(                        "Y-m-d",                        strtotime(" +8 months")                    );                    $upgrade->status = 0;                    if ($upgradesTable->save($upgrade)) {                        if (                            !empty($upgradeInfo) &&                            $upgradeInfo->upgraded_count > 0                        ) {                            $upgradesTable->updateAll(                                [                                    "business_point" => 0,                                    "modified" => date("Y-m-d H:i:s"),                                ],                                ["Upgrades.upgraded_id" => $upgraded_id]                            );                        }                        $upgrade_table_id = $upgrade->id;                        $userInfo = $usersTable->get($upgraded_id);                        $userInfo->status = 1;                        if ($usersTable->save($userInfo)) {                            $conditions = ["Users.id" => $upgraded_id];                            $join = [                                [                                    "table" => "details",                                    "alias" => "Details",                                    "type" => "INNER",                                    "conditions" => [                                        "Details.user_id = Users.id",                                    ],                                ],                            ];                            $fields = [                                "Details.id",                                "Details.first_name",                                "Details.middle_name",                                "Details.last_name",                                "Details.contact_no",                            ];                            $userData = $usersTable                                ->find("all", [                                    "fields" => $fields,                                    "conditions" => $conditions,                                    "join" => $join,                                ])                                ->enableAutoFields(true)                                ->first();                            //$usersTable->updateParentsOnUpgrade($upgraded_id, $userData->parent_id, $package_bv);                            $usersTable->updateParentsOnPackageUpgrade(                                $upgraded_id,                                $userData->parent_id,                                $package_bv                            );                            if (                                $userData->sponsor_id > 0 &&                                !empty($userData->sponsor_id) &&                                isset($userData->sponsor_id)                            ) {                                $sponsorInfo = $usersTable                                    ->find("all", [                                        "conditions" => [                                            "Users.id" => $userData->sponsor_id,                                        ],                                    ])                                    ->enableAutoFields(true)                                    ->first();                                if (empty($sponsorInfo)) {                                    echo "Sponsor not found";                                    exit();                                }                                //echo $userData->sponsor_id;exit;                                $sponsor = $usersTable->get(                                    $userData->sponsor_id                                );                                if ($userData->position == "left") {                                    $sponsor->direct_active_left_one =                                        $sponsorInfo->direct_active_left_one +                                        $package_bv;                                } else {                                    $sponsor->direct_active_right_one =                                        $sponsorInfo->direct_active_right_one +                                        $package_bv;                                }                                $usersTable->save($sponsor);                                /*$downlines = $downlinesTable->find('all', array('conditions' => array('Downlines.user_table_id' => $upgraded_id)))->enableAutoFields(true)->toArray();                                foreach($downlines as $downline){                                    $downlineInfo = $downlinesTable->get($downline->id);                                    $downlineInfo->total_join = $downline->total_join + $package->package_bv;                                    //$downlineInfo->business_point = $downline->business_point + $package->business_point;                                    $downlineInfo->modified = date("Y-m-d H:i:s");                                    $downlinesTable->save($downlineInfo);                                }*/                                $template =                                    "Dear " .                                    $userData->Details["first_name"] .                                    " " .                                    $userData->Details["last_name"] .                                    "(" .                                    $userData->username .                                    "), Your account has TOPUP with " .                                    $package->name .                                    ". For help, please visit Jsksinfratech.com";                                $sendSMS = $usersTable->sendSMS(                                    $template,                                    $userData->Details["contact_no"]                                );                            }                            /*$usersTable->updateAchievedRewards($upgraded_id, $upgraded_id);                            $usersTable->updateAchievedBonanzas($upgraded_id, $upgraded_id);*/                            $this->Flash->success(                                __("User has been upgraded successfully.")                            );                            return $this->redirect($this->backend_url.'/users/upgrade-history');                        }                    }                }            }        }    }    public function degrade()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User : Upgrade";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $packagesTable = TableRegistry::get("Packages");        $upgradesTable = TableRegistry::get("Upgrades");        $downlinesTable = TableRegistry::get("Downlines");        $commissionsTable = TableRegistry::get("Commissions");        $payoutsTable = TableRegistry::get("Payouts");        $achievedRewardsTable = TableRegistry::get("AchievedRewards");        $achievedBonanzasTable = TableRegistry::get("AchievedBonanzas");        $join = [            [                "table" => "users",                "alias" => "Users",                "type" => "INNER",                "conditions" => ["Users.id = Upgrades.upgraded_id"],            ],        ];        $conditions = [];        $fields = ["Users.id", "Users.username"];        $users = $upgradesTable            ->find("all", [                "fields" => $fields,                "join" => $join,                "conditions" => $conditions,            ])            ->enableAutoFields(true)            ->toArray();        $this->set("users", $users);        if ($this->request->is("post")) {            /*echo '<pre>';            print_r($this->request->getData());            exit;*/            $postData = $this->request->getData();            if (isset($postData["Upgrade"]["upgraded_id"])) {                $user_id = $this->adminUser->id;                $upgraded_id = $postData["Upgrade"]["upgraded_id"];                $conditions = [                    "Upgrades.upgraded_id" => $upgraded_id,                ];                $upgradeInfo = $upgradesTable                    ->find("all", ["conditions" => $conditions])                    ->first();                if (!empty($upgradeInfo)) {                    $package = $packagesTable                        ->find("all", [                            "conditions" => [                                "Packages.id" => $upgradeInfo->package_id,                            ],                        ])                        ->enableAutoFields(true)                        ->first();                    $upgradesTable->deleteAll(["upgraded_id" => $upgraded_id]);                    $userInfo = $usersTable->get($upgraded_id);                    $userInfo->status = 3;                    if ($usersTable->save($userInfo)) {                        $conditions = ["Users.id" => $upgraded_id];                        $join = [                            [                                "table" => "details",                                "alias" => "Details",                                "type" => "INNER",                                "conditions" => ["Details.user_id = Users.id"],                            ],                        ];                        $fields = [                            "Details.id",                            "Details.first_name",                            "Details.middle_name",                            "Details.last_name",                            "Details.contact_no",                        ];                        $userData = $usersTable                            ->find("all", [                                "fields" => $fields,                                "conditions" => $conditions,                                "join" => $join,                            ])                            ->enableAutoFields(true)                            ->first();                        $package_bv = $package->package_bv;                        //$usersTable->updateParentsOnDegrade($upgraded_id, $userData->parent_id, $package_bv);                        $usersTable->updateParentsOnPackageDegrade(                            $upgraded_id,                            $userData->parent_id,                            $package_bv                        );                        if (                            $userData->sponsor_id > 0 &&                            !empty($userData->sponsor_id) &&                            isset($userData->sponsor_id)                        ) {                            $sponsorInfo = $usersTable                                ->find("all", [                                    "conditions" => [                                        "Users.id" => $userData->sponsor_id,                                    ],                                ])                                ->enableAutoFields(true)                                ->first();                            if (empty($sponsorInfo)) {                                echo "Sponsor not found";                                exit();                            }                            $sponsor = $usersTable->get($userData->sponsor_id);                            if ($userData->position == "left") {                                $sponsor->direct_active_left_one =                                    $sponsorInfo->direct_active_left_one -                                    $package_bv;                            } else {                                $sponsor->direct_active_right_one =                                    $sponsorInfo->direct_active_right_one -                                    $package_bv;                            }                            $usersTable->save($sponsor);                            $downlines = $downlinesTable                                ->find("all", [                                    "conditions" => [                                        "Downlines.user_table_id" => $upgraded_id,                                    ],                                ])                                ->enableAutoFields(true)                                ->toArray();                            foreach ($downlines as $downline) {                                $downlineInfo = $downlinesTable->get(                                    $downline->id                                );                                $downlineInfo->total_join =                                    $downline->total_join -                                    $package->package_bv;                                //$downlineInfo->business_point = $downline->business_point + $package->business_point;                                $downlineInfo->modified = date("Y-m-d H:i:s");                                $downlinesTable->save($downlineInfo);                            }                        }                        $achievedRewardsTable->deleteAll([                            "upgraded_id" => $upgraded_id,                        ]);                        $achievedBonanzasTable->deleteAll([                            "upgraded_id" => $upgraded_id,                        ]);                    }                    $this->Flash->success(                        __("User has been degraded successfully.")                    );                    return $this->redirect($this->backend_url.'/users/upgrade-history');                }            }        }    }    public function editAccount($intUserId = null)    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User : Edit Account";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $join = [            [                "table" => "details",                "alias" => "Details",                "type" => "INNER",                "conditions" => ["Details.user_id = Users.id"],            ],        ];        $fields = ["Details.id", "Details.first_name", "Details.last_name"];        $users = $usersTable            ->find("all", [                "fields" => $fields,                "join" => $join,                "conditions" => ["Users.role_id" => 2],            ])            ->enableAutoFields(true)            ->toArray();        $this->set("users", $users);        $this->set("intUserId", $intUserId);        $template = "edit_account";        if ($this->request->is("post")) {            //echo '<pre>';            //print_r($this->request->getData());exit;            /*if(isset($this->request->getData()['btn_edit_account'])){                if(!empty($this->request->getData()['User']['id']) && (!empty($this->request->getData()['User']['username']) || !empty($this->request->getData()['User']['password']))){                    $checkUsername = $usersTable->find('all', array('conditions' => array('Users.username' => $this->request->getData()['User']['username'], 'Users.id !=' => $this->request->getData()['User']['id'])))->count();                    if($checkUsername == 0){                        $userEditAccountData['User'] = $this->request->getData()['User'];                        $this->request->getSession()->write('userEditAccountData', $userEditAccountData);                        if($this->request->getSession()->check('userEditAccountData')){                            $otp = rand(123456, 999999);                            $message = "Your OTP for www.cryptowebmine.com is ".$otp.". Valid for next 60 mins only.";                            $sendSMS = $usersTable->sendSMS($message, $this->adminUser->Details['contact_no']);                            if($sendSMS == 1){                                $this->request->getSession()->write('editAccountOtp', $otp);                                if($this->request->getSession()->check('editAccountOtp')){                                    $template = 'otp';                                    $this->Flash->success(__('Please complete edit account process by entering sent OTP below on your registered contact number.'));                                }                            }else{                                $this->Flash->error(__('SMS API is not working, please contact your site administrator.'));                            }                        }                    }else{                        $this->Flash->error(__('Username already used by registered users. Please update account with different username.'));                     }                }else{                    $this->Flash->error(__('Please fill the required fields.'));                 }            }            if(isset($this->request->getData()['btn_otp'])){                $template = 'otp';                $editAccountOtp = $this->request->getSession()->read('editAccountOtp');                if($editAccountOtp == $this->request->getData()['User']['otp']){                    $userEditAccountData = $this->request->getSession()->read('userEditAccountData');                    if(isset($userEditAccountData['User']['username']) && !empty($userEditAccountData['User']['username'])){                        $userSaveData = $usersTable->get($userEditAccountData['User']['id']);                        $userSaveData->username = $userEditAccountData['User']['username'];                        $usersTable->save($userSaveData);                    }                    if(isset($userEditAccountData['User']['password']) && !empty($userEditAccountData['User']['password'])){                        $userSaveData = $usersTable->get($userEditAccountData['User']['id']);                        $userSaveData->password = md5($userEditAccountData['User']['password']);                        $usersTable->save($userSaveData);                    }                    $this->request->getSession()->delete('editAccountOtp');                    $this->request->getSession()->delete('userEditAccountData');                    $this->Flash->success(__('Account information of selected user has been updated successfully.'));                    return $this->redirect(['controller' => 'users', 'action' => 'index', 'prefix' => $this->backend]);                }else{                    $this->Flash->error(__('Entered OTP is wrong. Please enter correct OTP.'));                 }            }*/            // exit;            if (                !empty($this->request->getData()["User"]["id"]) ||                !empty($this->request->getData()["User"]["password"])            ) {                $checkUsername = $usersTable                    ->find("all", [                        "conditions" => [                            "Users.id" => $this->request->getData()["User"]["id"],                        ],                    ])                    ->count();                if ($checkUsername > 0) {                    $userSaveData = $usersTable->get(                        $this->request->getData()["User"]["id"]                    );                    $userSaveData->password = md5(                        $this->request->getData()["User"]["password"]                    );                    $usersTable->save($userSaveData);                    $this->Flash->success(                        __(                            "Account information of selected user has been updated successfully."                        )                    );                    return $this->redirect($this->backend_url.'/users/index');                } else {                    $this->Flash->error(                        __(                            "Entred username does not exist in our database. Please enter the correct username for selected member."                        )                    );                }            } else {                $this->Flash->error(__("Please fill the required fields."));            }        }        $this->render($template);    }    public function editProfile($intUserId = null)    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User : Edit Profile";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $detailsTable = TableRegistry::get("Details");        $countriesTable = TableRegistry::get("Countries");        $statesTable = TableRegistry::get("States");        $attachmentsTable = TableRegistry::get("Attachments");        $join = [            [                "table" => "attachments",                "alias" => "Photo",                "type" => "LEFT",                "conditions" => [                    'Photo.reference_id = Users.id AND Photo.reference_type = "user_photo"',                ],            ],            [                "table" => "attachments",                "alias" => "IdProof",                "type" => "LEFT",                "conditions" => [                    'IdProof.reference_id = Users.id AND IdProof.reference_type = "id_proof"',                ],            ],            [                "table" => "attachments",                "alias" => "AddressProof",                "type" => "LEFT",                "conditions" => [                    'AddressProof.reference_id = Users.id AND AddressProof.reference_type = "address_proof"',                ],            ],        ];        $conditions = ["Users.id" => $intUserId];        $fields = [            "Photo.id",            "Photo.file",            "Photo.caption",            "IdProof.id",            "IdProof.file",            "IdProof.caption",            "AddressProof.id",            "AddressProof.file",            "AddressProof.caption",        ];        $userInfo = $usersTable            ->find("all", [                "fields" => $fields,                "conditions" => $conditions,                "join" => $join,            ])            ->contain(["Details"])            ->enableAutoFields(true)            ->first();        //echo '<pre>';        //print_r($userInfo);exit;        if (empty($userInfo)) {            return $this->redirect($this->backend_url.'/users/index');        }        $this->set("userInfo", $userInfo);        $countries = $countriesTable            ->find("all", [                "conditions" => ["Countries.status" => 1],                "order" => ["Countries.name" => "ASC"],            ])            ->enableAutoFields(true)            ->toArray();        $this->set("countries", $countries);        $conditions = [            "States.id" => $userInfo->detail->state_id ? $userInfo->detail->state_id : '',        ];        $state = $statesTable            ->find("all", ["conditions" => $conditions])            ->enableAutoFields(true)            ->first();        $this->set("state", $state);        if ($this->request->is("post")) {            //echo '<pre>';            //print_r($this->request->getData());exit;            $email = $this->request->getData()["User"]["email"]                ? trim($this->request->getData()["User"]["email"])                : "";            $username = $this->request->getData()["User"]["username"]                ? trim($this->request->getData()["User"]["username"])                : "";            $contact_no = $this->request->getData()["Detail"]["contact_no"]                ? $this->request->getData()["Detail"]["contact_no"]                : "";            if (!empty($username) && !empty($contact_no)) {                $checkUsername = $usersTable                    ->find("all", [                        "conditions" => [                            "Users.username" => $username,                            "Users.id !=" => $this->request->getData()["User"]["id"],                        ],                    ])                    ->count();                $checkContactNumber = $detailsTable                    ->find("all", [                        "conditions" => [                            "Details.contact_no" => $contact_no,                            "Details.user_id !=" =>                                $this->request->getData()["User"]["id"],                        ],                    ])                    ->count();                if ($checkUsername > 0) {                    $this->Flash->error(                        __(                            "Entered username already used by our registered user. Please register with different username"                        )                    );                }                /*elseif($checkContactNumber > 0){                    $this->Flash->error(__('Entered contact number already used by our registered user. Please resgister with different contact number'));                }*/ else {                    $conditions = [                        "Details.pan_number" =>                            $this->request->getData()["Detail"]["pan_number"],                    ];                    $checkPanCount = $detailsTable                        ->find("all", ["conditions" => $conditions])                        ->count();                    if ($checkPanCount < 1000) {                        $user_id = $this->request->getData()["User"]["id"];                        $userData = $usersTable->get($user_id);                        $userData->username = $username;                        $userData->email = $email;                        if ($usersTable->save($userData)) {                            $detail = $detailsTable                                ->find("all", [                                    "conditions" => [                                        "Details.user_id" => $user_id,                                    ],                                ])                                ->first();                            if (!empty($detail)) {                                $detailData = $detailsTable->get($detail->id);                                $detailData->first_name =                                    $this->request->getData()["Detail"][                                        "first_name"                                    ];                                $detailData->last_name = isset(                                    $this->request->getData()["Detail"]["last_name"]                                )                                    ? $this->request->getData()["Detail"][                                        "last_name"                                    ]                                    : null;                                $detailData->father_name =                                    $this->request->getData()["Detail"][                                        "father_name"                                    ];                                $detailData->dob =                                    $this->request->getData()["Detail"]["dob"];                                if (                                    isset(                                        $this->request->getData()["Detail"]["gender"]                                    ) &&                                    !empty(                                        $this->request->getData()["Detail"]["gender"]                                    )                                ) {                                    $detailData->gender =                                        $this->request->getData()["Detail"][                                            "gender"                                        ];                                }                                //$detailData->contact_no       =   $this->request->getData()['Detail']['contact_no'];                                if (                                    isset(                                        $this->request->getData()["Detail"][                                            "country_id"                                        ]                                    ) &&                                    !empty(                                        $this->request->getData()["Detail"][                                            "country_id"                                        ]                                    )                                ) {                                    $detailData->country_id =                                        $this->request->getData()["Detail"][                                            "country_id"                                        ];                                }                                if (                                    isset(                                        $this->request->getData()["Detail"][                                            "state_id"                                        ]                                    ) &&                                    !empty(                                        $this->request->getData()["Detail"][                                            "state_id"                                        ]                                    )                                ) {                                    $detailData->state_id =                                        $this->request->getData()["Detail"][                                            "state_id"                                        ];                                }                                $detailData->city_name =                                    $this->request->getData()["Detail"]["city_name"];                                $detailData->address =                                    $this->request->getData()["Detail"]["address"];                                $detailData->pin_code =                                    $this->request->getData()["Detail"]["pin_code"];                                $detailData->adhar_number = isset(                                    $this->request->getData()["Detail"][                                        "adhar_number"                                    ]                                )                                    ? $this->request->getData()["Detail"][                                        "adhar_number"                                    ]                                    : null;                                $detailData->occupation = isset(                                    $this->request->getData()["Detail"]["occupation"]                                )                                    ? $this->request->getData()["Detail"][                                        "occupation"                                    ]                                    : null;                                $detailData->pan_number = isset(                                    $this->request->getData()["Detail"]["pan_number"]                                )                                    ? $this->request->getData()["Detail"][                                        "pan_number"                                    ]                                    : null;                                $detailData->account_number = isset(                                    $this->request->getData()["Detail"][                                        "account_number"                                    ]                                )                                    ? $this->request->getData()["Detail"][                                        "account_number"                                    ]                                    : null;                                $detailData->bank_name =                                    $this->request->getData()["Detail"]["bank_name"];                                $detailData->branch_name =                                    $this->request->getData()["Detail"][                                        "branch_name"                                    ];                                $detailData->ifsc_code =                                    $this->request->getData()["Detail"]["ifsc_code"];                                if (                                    isset(                                        $this->request->getData()["Detail"][                                            "type_of_account"                                        ]                                    ) &&                                    !empty(                                        $this->request->getData()["Detail"][                                            "type_of_account"                                        ]                                    )                                ) {                                    $detailData->type_of_account =                                        $this->request->getData()["Detail"][                                            "type_of_account"                                        ];                                }                                if (                                    isset(                                        $this->request->getData()["Detail"][                                            "contact_no"                                        ]                                    ) &&                                    !empty(                                        $this->request->getData()["Detail"][                                            "contact_no"                                        ]                                    )                                ) {                                    $detailData->contact_no =                                        $this->request->getData()["Detail"][                                            "contact_no"                                        ];                                }                                $detailData->whats_app_number = isset(                                    $this->request->getData()["Detail"][                                        "whats_app_number"                                    ]                                )                                    ? $this->request->getData()["Detail"][                                        "whats_app_number"                                    ]                                    : null;                                $detailData->nominee_name =                                    $this->request->getData()["Detail"][                                        "nominee_name"                                    ];                                $detailData->relationship =                                    $this->request->getData()["Detail"][                                        "relationship"                                    ];                                $detailsTable->save($detailData);                                if (                                    !empty($this->request->getData()["Attachment"])                                ) {                                    foreach (                                        $this->request->getData()["Attachment"]                                        as $referenceType => $referenceValue                                    ) {                                        $attachmentData = $attachmentsTable->get(                                            $referenceValue[0]                                        );                                        $attachmentData->reference_id = $user_id;                                        $attachmentData->reference_type = $referenceType;                                        $attachmentData->caption =                                            $referenceValue["caption"][0];                                        $attachmentsTable->save(                                            $attachmentData                                        );                                    }                                }                                $parentName =                                    $this->request->getData()["Detail"][                                        "first_name"                                    ];                                $usersTable->updateAll(                                    ["parent_name" => $parentName],                                    ["parent_id" => $user_id]                                );                                $usersTable->updateAll(                                    ["sponsor_name" => $parentName],                                    ["sponsor_id" => $user_id]                                );                            }                            $this->Flash->success(                                __("User has been updated successfully.")                            );                            return $this->redirect($this->backend_url.'/users/index');                        }                    } else {                        $this->Flash->error(                            __(                                "Entered PAN is already used 7 times. So please different PAN number."                            )                        );                    }                }            } else {                $this->Flash->error(__("Please fill all the required fields."));            }        }    }    public function userDashboard()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User : Dashboard";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $binariesTable = TableRegistry::get("Binaries");        $conditions = [            "Binaries.status" => 1,        ];        $fields = ["Binaries.amount", "Binaries.percentage"];        $binary = $binariesTable            ->find("all", ["fields" => $fields, "conditions" => $conditions])            ->first();        $this->set("binary", $binary);        $conditions = [            "Users.role_id" => 2,            "Users.status NOT IN (2)",        ];        $users = $usersTable            ->find("all", ["conditions" => $conditions])            ->enableAutoFields(true)            ->toArray();        $this->set("users", $users);        $statistics = [];        if ($this->request->is("post")) {            /*echo '<pre>';            print_r($this->request->getData());            exit;*/            $user_id = $this->request->getData()["User"]["id"];            $usersTable = TableRegistry::get("Users");            $conditions = ["Users.id" => $user_id];            $joins = [                [                    "table" => "details",                    "alias" => "Details",                    "type" => "INNER",                    "conditions" => ["Details.user_id = Users.id"],                ],            ];            $user = $usersTable                ->find("all", [                    "fields" => [                        "Details.id",                        "Details.first_name",                        "Details.middle_name",                        "Details.last_name",                        "Details.contact_no",                        "Details.pan_number",                    ],                    "conditions" => $conditions,                    "join" => $joins,                ])                ->enableAutoFields(true)                ->first();            $this->set("user", $user);            $conn = ConnectionManager::get("default");            $query = $conn->execute(                "SELECT SUM(Payouts.direct_amount) as directIncome, SUM(Payouts.matching_amount) as matchingAmount, SUM(Payouts.royalty_amount) as royaltyAmount, SUM(Payouts.roi) as roiAmount, u.is_mobile_club, u.is_laptop_club, u.is_bike_club,                                (SELECT SUM(tWalletAmt.amount) FROM wallets as tWalletAmt WHERE tWalletAmt.user_id = '" .                    $user_id .                    "' AND tWalletAmt.status = '1') AS totalWalletAmount,                                (SELECT SUM(tTransferredAmt.amount) FROM wallets as tTransferredAmt WHERE tTransferredAmt.transfer_by = '" .                    $user_id .                    "' AND tTransferredAmt.status = '1') AS totalTransferredAmount,                                (SELECT SUM(tUpgradesAmt.package_amount) FROM upgrades as tUpgradesAmt WHERE tUpgradesAmt.upgraded_by = '" .                    $user_id .                    "') AS totalUpgradesAmount,                                (SELECT (SUM(pNetAmt.net_amount) - SUM(pNetAmt.admin_commission)) FROM payments as pNetAmt WHERE pNetAmt.user_id = '" .                    $user_id .                    "') AS totalPayouts,                                (SELECT SUM(sWithdrawals.requested_amount) FROM payments as sWithdrawals WHERE sWithdrawals.user_id = '" .                    $user_id .                    "' AND sWithdrawals.status = '1') AS successfullWithdrawls,                                (SELECT SUM(pWithdrawals.requested_amount) FROM payments as pWithdrawals WHERE pWithdrawals.user_id = '" .                    $user_id .                    "' AND pWithdrawals.status = '0') AS pendingWithdrawls,                                (SELECT SUM(tPackages.package_amount) FROM upgrades as tPackages WHERE tPackages.upgraded_id = '" .                    $user_id .                    "' AND tPackages.expiry_date >= '" .                    date("Y-m-d") .                    "') AS totalPackages,                                (SELECT tAativation.created FROM upgrades as tAativation WHERE tAativation.upgraded_id = '" .                    $user_id .                    "' ORDER BY tAativation.id ASC LIMIT 0,1) AS activationDate,                                (SELECT exPackage.expiry_date FROM upgrades as exPackage WHERE exPackage.upgraded_id = '" .                    $user_id .                    "' AND exPackage.expiry_date < '" .                    date("Y-m-d") .                    "' ORDER BY exPackage.id DESC LIMIT 0, 1) AS lastExpiry,                                 (SELECT IF(uPP.total_active_left < uPP.total_active_right, uPP.total_active_left, uPP.total_active_right) - uPP.previous_pair FROM users as uPP WHERE uPP.id = '" .                    $user_id .                    "') AS totaPendingPayable                                FROM payouts as Payouts                                INNER JOIN users u ON Payouts.upagraded_user_id = u.id                                WHERE Payouts.upagraded_user_id = '" .                    $this->user->id .                    "'                                "            );            $statistics = $query->fetchAll("assoc");        }        $this->set("statistics", $statistics);        /*echo '<pre>';        print_r($statistics);exit;*/    }    public function addUser()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Manage Users : Add";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $detailsTable = TableRegistry::get("Details");        $attachmentsTable = TableRegistry::get("Attachments");        $conditions = [            "Users.role_id" => 2,            //'Users.status' => 1        ];        $join = [            [                "table" => "details",                "alias" => "Details",                "type" => "INNER",                "conditions" => ["Details.user_id = Users.id"],            ],        ];        $order = [            "Users.username" => "ASC",        ];        $fields = ["Details.id", "Details.first_name", "Details.last_name"];        $users = $usersTable            ->find("all", [                "fields" => $fields,                "conditions" => $conditions,                "join" => $join,                "order" => $order,            ])            ->enableAutoFields(true)            ->toArray();        //print_r($users);exit;        $this->set("users", $users);        if ($this->request->is("post")) {            /*echo '<pre>';            print_r($this->request->getData());            exit;*/            $postData = $this->request->getData();            $username = $usersTable->getUniqueUsername("FASHI");            $password = rand(123456, 999999);            $epin = isset($postData["User"]["epin"])                ? trim($postData["User"]["epin"])                : null;            $rank = isset($postData["User"]["rank"])                ? trim($postData["User"]["rank"])                : null;            $plot_id = isset($postData["User"]["plot_id"])                ? trim($postData["User"]["plot_id"])                : null;            $email = isset($postData["User"]["email"])                ? trim($postData["User"]["email"])                : null;            $sponser_username = isset(                $postData["User"]["sponser_username"]            )                ? trim($postData["User"]["sponser_username"])                : null;            $position = isset($postData["User"]["position"])                ? trim($postData["User"]["position"])                : null;            $first_name = isset($postData["Detail"]["first_name"])                ? trim($postData["Detail"]["first_name"])                : "";            $last_name = isset($postData["Detail"]["last_name"])                ? trim($postData["Detail"]["last_name"])                : "";            $contact_no = isset($postData["Detail"]["contact_no"])                ? trim($postData["Detail"]["contact_no"])                : "";            $photo_attachment_id = isset(                $postData["Detail"]["photo_attachment_id"][0]            )                ? $postData["Detail"]["photo_attachment_id"][0]                : null;            $address_attachment_id = isset(                $postData["Detail"]["address_attachment_id"][0]            )                ? $postData["Detail"]["address_attachment_id"][0]                : null;            $pan_attachment_id = isset(                $postData["Detail"]["pan_attachment_id"][0]            )                ? $postData["Detail"]["pan_attachment_id"][0]                : null;            if (                !empty($username) &&                !empty($password) &&                !empty($sponser_username) &&                !empty($position) &&                !empty($first_name) &&                !empty($contact_no)            ) {                $checkEmail = $usersTable                    ->find("all", ["conditions" => ["Users.email" => $email]])                    ->count();                $checkUsername = $usersTable                    ->find("all", [                        "conditions" => ["Users.username" => $username],                    ])                    ->count();                $checkContactNumber = $detailsTable                    ->find("all", [                        "conditions" => ["Details.contact_no" => $contact_no],                    ])                    ->count();                $conditions = [                    "Users.username" => $sponser_username,                ];                $joins = [                    [                        "table" => "details",                        "alias" => "Details",                        "type" => "INNER",                        "conditions" => ["Details.user_id = Users.id"],                    ],                ];                $sponserInfo = $usersTable                    ->find("all", [                        "fields" => [                            "Details.id",                            "Details.first_name",                            "Details.middle_name",                            "Details.last_name",                        ],                        "conditions" => $conditions,                        "join" => $joins,                    ])                    ->enableAutoFields(true)                    ->first();                //echo"<pre>";print_r($checkEmail);exit;                //echo"<pre>";print_r($checkUsername);exit;                /*if($checkEmail >= 700){                    $this->Flash->error(__('Entered email id already used 7 times by our registered user. So Please resgister with different email id.'));                }                else */                if ($checkUsername > 0) {                    $this->Flash->error(                        __(                            "Entered username already used by our registered user. Please register with different username"                        )                    );                }                /*elseif($checkContactNumber >= 7){                   $this->Flash->error(__('Entered contact number already used 7 times by our registered user. Please resgister with different contact number'));                }*/ elseif (                    empty($sponserInfo)                ) {                    $this->Flash->error(                        __(                            "Entered referral id does not exist in our database. Please resgister with different referral id."                        )                    );                }else {                    //print_r($usersTable->getLastUserInfo($sponserInfo->id, $position));exit;                    $getLastUserInfo = json_decode(                        $usersTable->getLastUserInfo(                            $sponserInfo->id,                            $position                        )                    );                    $user = $usersTable->newEmptyEntity();                    $user->role_id = 2;                    $user->parent_id = $getLastUserInfo->id;                    $user->parent_name =$getLastUserInfo->Details->first_name ." " . $getLastUserInfo->Details->last_name;                    $user->sponsor_id = $sponserInfo->id;                    $user->sponsor_name = $sponserInfo->Details["first_name"] ." " .$sponserInfo->Details["last_name"];                    $user->position = $position;                    $user->email = $email;                    $user->username = $username;                    $user->password = md5($password);                    $user->transaction_password = md5($password);                    $user->total_left = 0;                    $user->total_right = 0;                    $user->total_active_left = 0;                    $user->total_active_right = 0;                    $user->total_inactive_left = 0;                    $user->total_inactive_right = 0;                    $user->total_direct_left = 0;                    $user->total_direact_right = 0;                    $user->total_direct_acitve_left = 0;                    $user->total_direct_acitve_right = 0;                    $user->total_direct_inacitve_left = 0;                    $user->total_direct_inacitve_right = 0;                    //$user->rank = $rank;                    $user->status = 3;                    if ($usersTable->save($user)) {                        $user_id = $user->id;                        $detail = $detailsTable->newEmptyEntity();                        $detail->user_id = $user_id;                        $detail->first_name = isset(                            $postData["Detail"]["first_name"]                        )                            ? $postData["Detail"]["first_name"]                            : null;                        $detail->last_name = isset(                            $postData["Detail"]["last_name"]                        )                            ? $postData["Detail"]["last_name"]                            : null;                        $detail->pan_number = isset(                            $postData["Detail"]["pan_number"]                        )                            ? $postData["Detail"]["pan_number"]                            : null;                        $detail->adhar_number = isset(                            $postData["Detail"]["adhar_number"]                        )                            ? $postData["Detail"]["adhar_number"]                            : null;                        $detail->country_id = isset(                            $postData["Detail"]["country_id"]                        )                            ? $postData["Detail"]["country_id"]                            : null;                        $detail->contact_no = isset(                            $postData["Detail"]["contact_no"]                        )                            ? $postData["Detail"]["contact_no"]                            : null;                        $detail->adhar_number = isset(                            $postData["Detail"]["adhar_number"]                        )                            ? $postData["Detail"]["adhar_number"]                            : null;                        $detail->pan_number = isset(                            $postData["Detail"]["pan_number"]                        )                            ? $postData["Detail"]["pan_number"]                            : null;                        $detail->bank_name = isset(                            $postData["Detail"]["bank_name"]                        )                            ? $postData["Detail"]["bank_name"]                            : null;                        $detail->account_number = isset(                            $postData["Detail"]["account_number"]                        )                            ? $postData["Detail"]["account_number"]                            : null;                        $detail->ifsc_code = isset(                            $postData["Detail"]["ifsc_code"]                        )                            ? $postData["Detail"]["ifsc_code"]                            : null;                        $detail->branch_name = isset(                            $postData["Detail"]["branch_name"]                        )                            ? $postData["Detail"]["branch_name"]                            : null;                        $detail->google_pay_number = isset(                            $postData["Detail"]["google_pay_number"]                        )                            ? $postData["Detail"][                                "google_pay_number"                            ]                            : null;                        $detail->phone_pay_number = isset(                            $postData["Detail"]["phone_pay_number"]                        )                            ? $postData["Detail"]["phone_pay_number"]                            : null;                        $detail->paytm_number = isset(                            $postData["Detail"]["paytm_number"]                        )                            ? $postData["Detail"]["paytm_number"]                            : null;                        $detail->is_kyc_approved = isset(                            $postData["Detail"]["is_kyc_approved"]                        )                            ? $postData["Detail"]["is_kyc_approved"]                            : null;                        $detail->photo_attachment_id = $photo_attachment_id;                        $detail->address_attachment_id = $address_attachment_id;                        $detail->pan_attachment_id = $pan_attachment_id;                        $detailsTable->save($detail);                        if (!empty($photo_attachment_id)) {                            $attachmentData = $attachmentsTable->get(                                $photo_attachment_id                            );                            $attachmentData->caption = isset(                                $postData["Detail"][                                    "photo_attachment_id"                                ]["caption"][0]                            )                                ? $postData["Detail"][                                    "photo_attachment_id"                                ]["caption"][0]                                : null;                            $attachmentsTable->save($attachmentData);                        }                        if (!empty($address_attachment_id)) {                            $attachmentData = $attachmentsTable->get(                                $address_attachment_id                            );                            $attachmentData->caption = isset(                                $postData["Detail"][                                    "address_attachment_id"                                ]["caption"][0]                            )                                ? $postData["Detail"][                                    "address_attachment_id"                                ]["caption"][0]                                : null;                            $attachmentsTable->save($attachmentData);                        }                        if (!empty($pan_attachment_id)) {                            $attachmentData = $attachmentsTable->get(                                $pan_attachment_id                            );                            $attachmentData->caption = isset(                                $postData["Detail"][                                    "pan_attachment_id"                                ]["caption"][0]                            )                                ? $postData["Detail"][                                    "pan_attachment_id"                                ]["caption"][0]                                : null;                            $attachmentsTable->save($attachmentData);                        }                        //echo"<pre>";print_r($getLastUserInfo);exit;                        $parent = $usersTable->get($getLastUserInfo->id);                        if ($position == "left") {                            $parent->left_user = $user_id;                        } else {                            $parent->right_user = $user_id;                        }                        $usersTable->save($parent);                        $updateParents = $usersTable->updateParents(                            $user_id,                            $getLastUserInfo->id,                            $position,                            $user_id,                            0,                            $getLastUserInfo->id,                            $sponserInfo->id                        );                        $sponsor = $usersTable->get($sponserInfo->id);                        if ($position == "left") {                            $sponsor->total_direct_left =                                $sponserInfo->total_direct_left + 1;                            $sponsor->total_direct_inacitve_left =                                $sponserInfo->total_direct_inacitve_left + 1;                        } else {                            $sponsor->total_direact_right =                                $sponserInfo->total_direact_right + 1;                            $sponsor->total_direct_inacitve_right =                                $sponserInfo->total_direct_inacitve_right + 1;                        }                        $usersTable->save($sponsor);                        /* $Email = new Email();                        $fromemail = $this->setting->sender_email;                        $to_email = $email;                        $Email->template('registration', 'emaillayout')                              ->viewVars(array("user" => $postData))                              ->emailFormat('html')                              ->to($to_email)                              ->from(array($fromemail => 'Admire Global'))                              ->subject('Dear '.$postData['Detail']['first_name'].' '.$postData['Detail']['last_name'].' ! You have successfully registered on admireglobal.io.')                              ->send();*/                        $template =                            "Dear " .                            $postData["Detail"]["first_name"] .                            " " .                            $sponserInfo->Details["last_name"] .                            ", Welcome to JSKS Infratech, Your Username: " .                            $username .                            " Password: " .                            $password .                            " Please visit Jsksinfratech.com";                        $sendSMS = $usersTable->sendSMS($template, $contact_no);                        //$this->request->getSession()->write('userId', $user_id);                        $this->request->getSession()->write("username", $username);                        $this->request->getSession()->write("password", $password);                        $this->Flash->success(                            __(                                "Congratulations! You have successfully resistered on site."                            )                        );                        return $this->redirect($this->backend_url.'/user/user-added');                    }                }            } else {                $this->Flash->error(__("Please fill all the required fields."));            }        }    }    public function userAdded()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Manage Users : User Added";        $this->set("title", $title);    }    public function userEmi($intUserId = null)    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User : Emi";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $userPropertyMappingsTable = TableRegistry::get("UserPropertyMappings");        $payoutsTable = TableRegistry::get("Payouts");        $commissionsTable = TableRegistry::get("Commissions");        $join = [            [                "table" => "details",                "alias" => "Details",                "type" => "INNER",                "conditions" => ["Details.user_id = Users.id"],            ],        ];        $conditions = [            "Users.role_id" => 2,            "Users.status NOT IN (2)",        ];        $fields = ["Details.id", "Details.first_name", "Details.last_name"];        $users = $usersTable            ->find("all", [                "fields" => $fields,                "join" => $join,                "conditions" => $conditions,            ])            ->enableAutoFields(true)            ->toArray();        $this->set("users", $users);        $emis = [];        $userInfo = [];        if (!empty($intUserId)) {            $conditions = [                "UserPropertyMappings.user_id" => $intUserId,            ];            $emis = $userPropertyMappingsTable                ->find("all", ["conditions" => $conditions])                ->enableAutoFields(true)                ->toArray();            $join = [                [                    "table" => "details",                    "alias" => "Details",                    "type" => "INNER",                    "conditions" => ["Details.user_id = Users.id"],                ],            ];            $conditions = [                "Users.id" => $intUserId,            ];            $fields = [                "Details.id",                "Details.first_name",                "Details.last_name",                "Users.id",                "Users.parent_id",                "Users.sponsor_id",                "Users.username",                "Users.position",            ];            $userInfo = $usersTable                ->find("all", [                    "fields" => $fields,                    "join" => $join,                    "conditions" => $conditions,                ])                ->first();        }        $this->set("emis", $emis);        $this->set("intUserId", $intUserId);        $this->set("userInfo", $userInfo);        /*echo '<pre>';        print_r($statistics);exit;*/        if ($this->request->is("post")) {            /*echo '<pre>';            print_r($this->request->getData());            exit;*/            $id = isset($this->request->getData()["UserPropertyMapping"]["id"])                ? $this->request->getData()["UserPropertyMapping"]["id"]                : "";            $amount = isset(                $this->request->getData()["UserPropertyMapping"]["amount"]            )                ? $this->request->getData()["UserPropertyMapping"]["amount"]                : "";            $direct_income_percentage = isset(                $this->request->getData()["UserPropertyMapping"][                    "direct_income_percentage"                ]            )                ? $this->request->getData()["UserPropertyMapping"][                    "direct_income_percentage"                ]                : "";            if (                !empty($id) &&                !empty($amount) &&                !empty($direct_income_percentage)            ) {                $commission = $commissionsTable                    ->find("all", ["conditions" => ["Commissions.status" => 1]])                    ->enableAutoFields(true)                    ->first();                $userPropertyMappingsData = $userPropertyMappingsTable->get(                    $id                );                $userPropertyMappingsData->status = 2;                if (                    $userPropertyMappingsTable->save($userPropertyMappingsData)                ) {                    $conditions = [                        "UserPropertyMappings.id" => $id,                    ];                    $userPropertyMappingInfo = $userPropertyMappingsTable                        ->find("all", ["conditions" => $conditions])                        ->first();                    /*echo '<pre>';                    print_r($userPropertyMappingInfo);exit;*/                    $usersTable->updateParentsOnPayEmi(                        $intUserId,                        $userInfo->parent_id,                        $userPropertyMappingInfo->matching_amount                    );                    if (!empty($userInfo->sponsor_id)) {                        $sponsorInfo = $usersTable                            ->find("all", [                                "conditions" => [                                    "Users.id" => $userInfo->sponsor_id,                                ],                            ])                            ->enableAutoFields(true)                            ->first();                        $sponsor = $usersTable->get($userInfo->sponsor_id);                        if ($userInfo->position == "left") {                            $sponsor->total_direct_acitve_left =                                $sponsorInfo->total_direct_acitve_left +                                $amount;                        } else {                            $sponsor->total_direct_acitve_right =                                $sponsorInfo->total_direct_acitve_right +                                $amount;                        }                        $usersTable->save($sponsor);                        $directAmount = $userPropertyMappingInfo->direct_amount;                        $payout = $payoutsTable->newEmptyEntity();                        $payout->upagraded_user_id = $userInfo->sponsor_id;                        $payout->direct_amount = $directAmount;                        $payout->tax = isset($commission->tax)                            ? $commission->tax                            : 0;                        $payout->admin_commission = isset($commission->amount)                            ? $commission->amount                            : 0;                        $payoutsTable->save($payout);                    }                    $userData = $usersTable->get($intUserId);                    $userData->is_level_up = 1;                    $usersTable->save($userData);                }            }            $this->Flash->success(__("EMI has been paid successfully."));            return $this->redirect(                $this->backend_url . "/user/user-emi/" . $intUserId            );        }    }    public function bulkupload()    {        if ($this->request->is("post")) {            echo "<pre>";            print_r($this->request->getData());            require_once $_SERVER["DOCUMENT_ROOT"] .                "/aradhyamcity/webroot/classes/bulk_upload.php";            $object = bulk_upload($this->request->getData());            foreach ($object->getWorksheetIterator() as $worksheet) {                print_r($worksheet->getCellByColumnAndRow(3, 1)->getValue());                echo $highestRow = $worksheet->getHighestRow();                echo "<br>";            }            exit();        }    }    public function currentRate()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Current Rate";        $this->set("title", $title);        $currentRatesTable = TableRegistry::get("CurrentRates");        $conditions = [];        $currentRates = $currentRatesTable            ->find("all", ["conditions" => $conditions])            ->enableAutoFields(true)            ->toArray();        $this->set("currentRates", $currentRates);    }    public function addCurrentRate()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Current Rate";        $this->set("title", $title);        $currentRatesTable = TableRegistry::get("CurrentRates");        if ($this->request->is("post")) {            /*echo '<pre>';            print_r($this->request->getData());            exit;*/            $plan = isset($this->request->getData()["CurrentRate"]["plan"])                ? trim($this->request->getData()["CurrentRate"]["plan"])                : "";            $rate = isset($this->request->getData()["CurrentRate"]["rate"])                ? trim($this->request->getData()["CurrentRate"]["rate"])                : "";            $remark = isset($this->request->getData()["CurrentRate"]["remark"])                ? trim($this->request->getData()["CurrentRate"]["remark"])                : "";            if (!empty($plan) && !empty($rate) && !empty($remark)) {                $currentRatesTable->updateAll(                    ["status" => 0],                    ["plan" => $plan, "status" => 1]                );                $currentRateData = $currentRatesTable->newEmptyEntity();                $currentRateData->plan = $plan;                $currentRateData->rate = $rate;                $currentRateData->remark = $remark;                $currentRateData->status = 1;                if ($currentRatesTable->save($currentRateData)) {                    $this->Flash->success(                        __(                            "Congratulations! Current Rate has been added successfully."                        )                    );                    return $this->redirect(                        $this->backend_url . "/user/current-rate"                    );                }            }        }    }    public function assignPlot()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Assign Plot";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $propertiesTable = TableRegistry::get("Properties");        $currentRatesTable = TableRegistry::get("CurrentRates");        $assignPlotsTable = TableRegistry::get("AssignPlots");        $plotsTable = TableRegistry::get("Plots");        $conditions = ["Users.role_id" => 2];        $join = [            [                "table" => "details",                "alias" => "Details",                "type" => "INNER",                "conditions" => ["Details.user_id = Users.id"],            ],        ];        $fields = ["Details.id", "Details.first_name", "Details.last_name"];        $users = $usersTable            ->find("all", [                "fields" => $fields,                "join" => $join,                "conditions" => $conditions,            ])            ->enableAutoFields(true)            ->toArray();        $this->set("users", $users);        $conditions = [            "Properties.status" => 1,        ];        $order = ["Properties.id" => "DESC"];        $properties = $propertiesTable            ->find("all", ["conditions" => $conditions, "order" => $order])            ->enableAutoFields(true)            ->toArray();        $this->set("properties", $properties);        $conditions = [            "CurrentRates.status" => 1,        ];        $currentRateInfo = $currentRatesTable            ->find("all", ["conditions" => $conditions])            ->first();        $this->set("currentRateInfo", $currentRateInfo);        if ($this->request->is("post")) {            /*echo '<pre>';            print_r($this->request->getData());            exit;*/            $user_id = isset($this->request->getData()["AssignPlot"]["user_id"])                ? trim($this->request->getData()["AssignPlot"]["user_id"])                : "";            $property_id = isset(                $this->request->getData()["AssignPlot"]["property_id"]            )                ? trim($this->request->getData()["AssignPlot"]["property_id"])                : "";            $site_id = isset($this->request->getData()["AssignPlot"]["site_id"])                ? trim($this->request->getData()["AssignPlot"]["site_id"])                : "";            $block_id = isset($this->request->getData()["Plot"]["block_id"])                ? trim($this->request->getData()["Plot"]["block_id"])                : "";            $plot_id = isset($this->request->getData()["AssignPlot"]["plot_id"])                ? trim($this->request->getData()["AssignPlot"]["plot_id"])                : "";            $plot_number = isset(                $this->request->getData()["AssignPlot"]["plot_number"]            )                ? trim($this->request->getData()["AssignPlot"]["plot_number"])                : "";            $length = isset($this->request->getData()["AssignPlot"]["length"])                ? trim($this->request->getData()["AssignPlot"]["length"])                : "";            $width = isset($this->request->getData()["AssignPlot"]["width"])                ? trim($this->request->getData()["AssignPlot"]["width"])                : "";            $area = isset($this->request->getData()["AssignPlot"]["area"])                ? trim($this->request->getData()["AssignPlot"]["area"])                : "";            $location = isset($this->request->getData()["AssignPlot"]["location"])                ? trim($this->request->getData()["AssignPlot"]["location"])                : "";            $east = isset($this->request->getData()["AssignPlot"]["east"])                ? trim($this->request->getData()["AssignPlot"]["east"])                : "";            $west = isset($this->request->getData()["AssignPlot"]["west"])                ? trim($this->request->getData()["AssignPlot"]["west"])                : "";            $north = isset($this->request->getData()["AssignPlot"]["north"])                ? trim($this->request->getData()["AssignPlot"]["north"])                : "";            $south = isset($this->request->getData()["AssignPlot"]["south"])                ? trim($this->request->getData()["AssignPlot"]["south"])                : "";            $plan = isset($this->request->getData()["AssignPlot"]["plan"])                ? trim($this->request->getData()["AssignPlot"]["plan"])                : "";            $plc = isset($this->request->getData()["AssignPlot"]["plc"])                ? trim($this->request->getData()["AssignPlot"]["plc"])                : "";            $edc = isset($this->request->getData()["AssignPlot"]["edc"])                ? trim($this->request->getData()["AssignPlot"]["edc"])                : "";            $ifmc = isset($this->request->getData()["AssignPlot"]["ifmc"])                ? trim($this->request->getData()["AssignPlot"]["ifmc"])                : "";            $bsp = isset($this->request->getData()["AssignPlot"]["bsp"])                ? trim($this->request->getData()["AssignPlot"]["bsp"])                : "";            $current_rate = isset(                $this->request->getData()["AssignPlot"]["current_rate"]            )                ? trim($this->request->getData()["AssignPlot"]["current_rate"])                : "";            $total_amount = isset(                $this->request->getData()["AssignPlot"]["total_amount"]            )                ? trim($this->request->getData()["AssignPlot"]["total_amount"])                : "";            $plc_amount = isset(                $this->request->getData()["AssignPlot"]["plc_amount"]            )                ? trim($this->request->getData()["AssignPlot"]["plc_amount"])                : "";            $grand_total = isset(                $this->request->getData()["AssignPlot"]["grand_total"]            )                ? trim($this->request->getData()["AssignPlot"]["grand_total"])                : "";            $discount = isset($this->request->getData()["AssignPlot"]["discount"])                ? trim($this->request->getData()["AssignPlot"]["discount"])                : "";            $remark = isset($this->request->getData()["AssignPlot"]["remark"])                ? trim($this->request->getData()["AssignPlot"]["remark"])                : "";            if (                !empty($user_id) &&                !empty($property_id) &&                !empty($site_id) &&                !empty($block_id) &&                !empty($plot_id) &&                !empty($current_rate) &&                !empty($total_amount) &&                !empty($grand_total)            ) {                $conditions = [                    "AssignPlots.property_id" => $property_id,                    "AssignPlots.site_id" => $site_id,                    "AssignPlots.block_id" => $block_id,                    "AssignPlots.plot_id" => $plot_id,                    "AssignPlots.status !=" => 3,                ];                $assignPlotInfo = $assignPlotsTable                    ->find("all", ["conditions" => $conditions])                    ->first();                if (empty($assignPlotInfo)) {                    $assignPlotData = $assignPlotsTable->newEmptyEntity();                    $assignPlotData->user_id = $user_id;                    $assignPlotData->property_id = $property_id;                    $assignPlotData->site_id = $site_id;                    $assignPlotData->block_id = $block_id;                    $assignPlotData->plot_id = $plot_id;                    $assignPlotData->plot_number = $plot_number;                    $assignPlotData->length = $length;                    $assignPlotData->width = $width;                    $assignPlotData->area = $area;                    $assignPlotData->location = $location;                    $assignPlotData->east = $east;                    $assignPlotData->west = $west;                    $assignPlotData->north = $north;                    $assignPlotData->south = $south;                    $assignPlotData->plc = $plc;                    $assignPlotData->edc = $edc;                    $assignPlotData->ifmc = $ifmc;                    $assignPlotData->bsp = $bsp;                    $assignPlotData->plan = $plan;                    $assignPlotData->current_rate = $current_rate;                    $assignPlotData->total_amount = $total_amount;                    $assignPlotData->plc_amount = $plc_amount;                    $assignPlotData->grand_total = $grand_total;                    $assignPlotData->discount = $discount;                    $assignPlotData->remark = $remark;                    $assignPlotData->status = 1;                    if ($assignPlotsTable->save($assignPlotData)) {                        $plotData = $plotsTable->get($plot_id);                        $plotData->status = 2;                        $plotsTable->save($plotData);                        $this->Flash->success(                            __(                                "Congratulations! Plot has been assigned successfully."                            )                        );                        return $this->redirect(                            $this->backend_url . "/user/assigned-plots"                        );                    }                } else {                    $this->Flash->error(                        __("Selected plots already has been assigned.")                    );                }            } else {                $this->Flash->error(__("Please fill all required fields."));            }        }    }    public function assignedPlots()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Assigned Plots";        $this->set("title", $title);        $assignPlotsTable = TableRegistry::get("AssignPlots");        $join = [            [                "table" => "users",                "alias" => "Users",                "type" => "INNER",                "conditions" => ["Users.id = AssignPlots.user_id"],            ],            [                "table" => "details",                "alias" => "Details",                "type" => "INNER",                "conditions" => ["Details.user_id = Users.id"],            ],            [                "table" => "properties",                "alias" => "Properties",                "type" => "INNER",                "conditions" => ["Properties.id = AssignPlots.property_id"],            ],            [                "table" => "sites",                "alias" => "Sites",                "type" => "INNER",                "conditions" => ["Sites.id = AssignPlots.site_id"],            ],            [                "table" => "blocks",                "alias" => "Blocks",                "type" => "INNER",                "conditions" => ["Blocks.id = AssignPlots.block_id"],            ],            [                "table" => "plots",                "alias" => "Plots",                "type" => "INNER",                "conditions" => ["Plots.id = AssignPlots.plot_id"],            ],        ];        $conditions = [];        $fields = [            "Users.id",            "Users.username",            "Properties.id",            "Properties.title",            "Sites.id",            "Sites.title",            "Blocks.id",            "Blocks.title",            "Plots.id",            "Plots.name",            "Details.id",            "Details.first_name",            "Details.last_name",        ];        $order = ["AssignPlots.id" => "DESC"];        $assignPlots = $assignPlotsTable            ->find("all", [                "fields" => $fields,                "join" => $join,                "conditions" => $conditions,                "order" => $order,            ])            ->enableAutoFields(true)            ->toArray();        $this->set("assignPlots", $assignPlots);    }    public function changeAssignedPlotStatus($intStatus, $intId)    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Change Status";        $this->set("title", $title);        $assignPlotsTable = TableRegistry::get("AssignPlots");        $plotsTable = TableRegistry::get("Plots");        if (            empty($intStatus) ||            (empty($intId) && !is_numeric($intStatus) && !is_numeric($intId))        ) {            return $this->redirect($this->backend_url . "/user/assigned-plots");        }        $assignPlotData = $assignPlotsTable->get($intId);        $assignPlotData->status = $intStatus;        if ($assignPlotsTable->save($assignPlotData)) {            $conditions = [                "AssignPlots.id" => $intId,            ];            $assginedPlotInfo = $assignPlotsTable                ->find("all", ["conditions" => $conditions])                ->first();            echo "<pre>";            print_r();            if (!empty($assginedPlotInfo)) {                if ($intStatus == 1) {                    $status = 2;                } elseif ($intStatus == 2) {                    $status = 3;                } elseif ($intStatus == 3) {                    $status = 1;                }                $plotData = $plotsTable->get($assginedPlotInfo->plot_id);                $plotData->status = $status;                $plotsTable->save($plotData);            }            $this->Flash->success(                __("Congratulations! Status has been changed successfully.")            );            return $this->redirect($this->backend_url . "/user/assigned-plots");        }        $this->render(false);    }    public function kyc($intUserId = null)    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User : KYC";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $detailsTable = TableRegistry::get("Details");        $attachmentsTable = TableRegistry::get("Attachments");        $userId = $intUserId;        $join = [            [                "table" => "attachments",                "alias" => "Photo",                "type" => "LEFT",                "conditions" => ["Photo.id = Details.photo_attachment_id"],            ],            [                "table" => "attachments",                "alias" => "Address",                "type" => "LEFT",                "conditions" => ["Address.id = Details.address_attachment_id"],            ],            [                "table" => "attachments",                "alias" => "Pan",                "type" => "LEFT",                "conditions" => ["Pan.id = Details.pan_attachment_id"],            ],        ];        $conditions = [            "Details.user_id" => $userId,        ];        $fields = [            "Photo.id",            "Photo.file",            "Photo.caption",            "Address.id",            "Address.file",            "Address.caption",            "Pan.id",            "Pan.file",            "Pan.caption",        ];        $detail = $detailsTable            ->find("all", [                "fields" => $fields,                "join" => $join,                "conditions" => $conditions,            ])            ->enableAutoFields(true)            ->first();        $this->set("detail", $detail);        if ($this->request->is("post")) {            /* echo '<pre>';            print_r($this->request->getData());            exit;*/            $photo_attachment_id = isset(                $this->request->getData()["Detail"]["photo_attachment_id"][0]            )                ? $this->request->getData()["Detail"]["photo_attachment_id"][0]                : null;            $address_attachment_id = isset(                $this->request->getData()["Detail"]["address_attachment_id"][0]            )                ? $this->request->getData()["Detail"]["address_attachment_id"][0]                : null;            $pan_attachment_id = isset(                $this->request->getData()["Detail"]["pan_attachment_id"][0]            )                ? $this->request->getData()["Detail"]["pan_attachment_id"][0]                : null;            $detailData = $detailsTable->get(                $this->request->getData()["Detail"]["id"]            );            $detailData->pan_number = isset(                $this->request->getData()["Detail"]["pan_number"]            )                ? $this->request->getData()["Detail"]["pan_number"]                : null;            $detailData->bank_name = isset(                $this->request->getData()["Detail"]["bank_name"]            )                ? $this->request->getData()["Detail"]["bank_name"]                : null;            $detailData->account_number = isset(                $this->request->getData()["Detail"]["account_number"]            )                ? $this->request->getData()["Detail"]["account_number"]                : null;            $detailData->ifsc_code = isset(                $this->request->getData()["Detail"]["ifsc_code"]            )                ? $this->request->getData()["Detail"]["ifsc_code"]                : null;            $detailData->branch_name = isset(                $this->request->getData()["Detail"]["branch_name"]            )                ? $this->request->getData()["Detail"]["branch_name"]                : null;            $detailData->google_pay_number = isset(                $this->request->getData()["Detail"]["google_pay_number"]            )                ? $this->request->getData()["Detail"]["google_pay_number"]                : null;            $detailData->phone_pay_number = isset(                $this->request->getData()["Detail"]["phone_pay_number"]            )                ? $this->request->getData()["Detail"]["phone_pay_number"]                : null;            $detailData->paytm_number = isset(                $this->request->getData()["Detail"]["paytm_number"]            )                ? $this->request->getData()["Detail"]["paytm_number"]                : null;            $detailData->is_kyc_approved = isset(                $this->request->getData()["Detail"]["is_kyc_approved"]            )                ? $this->request->getData()["Detail"]["is_kyc_approved"]                : null;            $detailData->photo_attachment_id = $photo_attachment_id;            $detailData->address_attachment_id = $address_attachment_id;            $detailData->pan_attachment_id = $pan_attachment_id;            if ($detailsTable->save($detailData)) {                if (!empty($photo_attachment_id)) {                    $attachmentData = $attachmentsTable->get(                        $photo_attachment_id                    );                    $attachmentData->caption = isset(                        $this->request->getData()["Detail"]["photo_attachment_id"][                            "caption"                        ][0]                    )                        ? $this->request->getData()["Detail"]["photo_attachment_id"][                            "caption"                        ][0]                        : null;                    $attachmentsTable->save($attachmentData);                }                if (!empty($address_attachment_id)) {                    $attachmentData = $attachmentsTable->get(                        $address_attachment_id                    );                    $attachmentData->caption = isset(                        $this->request->getData()["Detail"]["address_attachment_id"][                            "caption"                        ][0]                    )                        ? $this->request->getData()["Detail"][                            "address_attachment_id"                        ]["caption"][0]                        : null;                    $attachmentsTable->save($attachmentData);                }                if (!empty($pan_attachment_id)) {                    $attachmentData = $attachmentsTable->get(                        $pan_attachment_id                    );                    $attachmentData->caption = isset(                        $this->request->getData()["Detail"]["pan_attachment_id"][                            "caption"                        ][0]                    )                        ? $this->request->getData()["Detail"]["pan_attachment_id"][                            "caption"                        ][0]                        : null;                    $attachmentsTable->save($attachmentData);                }                $this->Flash->success(                    __("Congratulations! KYC details has updated successfully.")                );                return $this->redirect(                    $this->backend_url . "/user/kyc/" . $userId                );            }            //exit;        }    }    public function assignedPlotDetails($intAssignedPlotId = null)    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Assigned Plot Details";        $this->set("title", $title);        if (empty($intAssignedPlotId)) {            return $this->redirect($this->backend_url . "/user/assigned-plots");        }        $assignPlotsTable = TableRegistry::get("AssignPlots");        $join = [            [                "table" => "properties",                "alias" => "Properties",                "type" => "INNER",                "conditions" => ["Properties.id = AssignPlots.property_id"],            ],            [                "table" => "blocks",                "alias" => "Blocks",                "type" => "INNER",                "conditions" => ["Blocks.id = AssignPlots.block_id"],            ],            [                "table" => "sites",                "alias" => "Sites",                "type" => "INNER",                "conditions" => ["Sites.id = AssignPlots.site_id"],            ],            [                "table" => "plots",                "alias" => "Plots",                "type" => "INNER",                "conditions" => ["Plots.id = AssignPlots.plot_id"],            ],            [                "table" => "users",                "alias" => "Users",                "type" => "INNER",                "conditions" => ["Users.id = AssignPlots.user_id"],            ],            [                "table" => "details",                "alias" => "Details",                "type" => "INNER",                "conditions" => ["Details.user_id = Users.id"],            ],        ];        $conditions = [            "AssignPlots.id" => $intAssignedPlotId,        ];        $fields = [            "Properties.id",            "Properties.title",            "Blocks.id",            "Blocks.title",            "Sites.id",            "Sites.title",            "Plots.id",            "Plots.name",            "Users.id",            "Users.username",            "Details.id",            "Details.first_name",            "Details.last_name",        ];        $assignedPlotInfo = $assignPlotsTable            ->find("all", [                "fields" => $fields,                "join" => $join,                "conditions" => $conditions,            ])            ->enableAutoFields(true)            ->first();        $this->set("assignedPlotInfo", $assignedPlotInfo);    }    public function viewUser($encUserId)    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User : View User";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $userId = base64_decode($encUserId);        $userInfo = $usersTable            ->find("all", ["conditions" => ["Users.id" => $userId]])            ->first();        if (empty($userInfo)) {            return $this->redirect($this->backend_url . "/users");        }        $this->request->getSession()->write("userId", $userInfo->id);        return $this->redirect($this->home_url . "/my-account");        $this->render(false);    }}