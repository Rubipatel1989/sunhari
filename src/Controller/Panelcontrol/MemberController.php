<?phpnamespace App\Controller\Panelcontrol;use App\Controller\AppController;use Cake\Core\Configure;use Cake\Network\Exception\ForbiddenException;use Cake\Network\Exception\NotFoundException;use Cake\View\Exception\MissingTemplateException;use Cake\ORM\TableRegistry;use Cake\Network\Session\DatabaseSession;use Cake\Controller\Component\FlashComponent;use Cake\Datasource\ConnectionManager;use Cake\Mailer\Email;class MemberController extends AppController{    public function activateUser()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User Activation : Activate User";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $upgradesTable = TableRegistry::get("Upgrades");        $downlinesTable = TableRegistry::get("Downlines");        $commissionsTable = TableRegistry::get("Commissions");        $payoutsTable = TableRegistry::get("Payouts");        $roisTable = TableRegistry::get("Rois");        $userId = $_GET['user_id'] ?? '';        $userData = [];        if ($userId) {            $conditions = ['Users.id' => $userId];            $userData = $usersTable->find('all', ['conditions' => $conditions])->enableAutoFields(true)->first();        }        $this->set('userData', $userData);        $conditions = ['Rois.status' => 1];        $order = ['Rois.id' => 'DESC'];        $rois = $roisTable->find('all', ['conditions' => $conditions, 'order' => $order])->enableAutoFields(true)->toArray();        $this->set('rois', $rois);        if ($this->request->is("post")) {            /*echo '<pre>';            print_r($this->request->getData());            exit;*/            $username = $this->request->getData()["Upgrade"]["username"] ? $this->request->getData()["Upgrade"]["username"] : '';            $sponsor_name = $this->request->getData()["Upgrade"]["sponsor_name"] ? $this->request->getData()["Upgrade"]["sponsor_name"] : '';            $package_amount = $this->request->getData()["Upgrade"]["package_amount"] ? $this->request->getData()["Upgrade"]["package_amount"] : '';            $roi_amount = $this->request->getData()["Upgrade"]["roi_amount"] ? $this->request->getData()["Upgrade"]["roi_amount"] : '';            if (                $username && $sponsor_name && $package_amount && $roi_amount            ) {                $conditions =  ['Users.username' => $username];                $userInfo = $usersTable->find('all', array('conditions' => $conditions))->enableAutoFields(true)->first();                $upgraded_id = $userInfo->id;                $user_id = $this->adminUser->id;                $package_bv = $package_amount;                $conditions =  ['Upgrades.upgraded_id' => $upgraded_id, 'Upgrades.is_activated' => 1];                $checkActivated = $upgradesTable->find('all', array('conditions' => $conditions))->count();                                if ($checkActivated > 0){                    $this->Flash->error(__("Sorry! selected user is already activated."));                } else {                    $upgrade = $upgradesTable->newEmptyEntity();                    $upgrade->upgraded_by = $user_id;                    $upgrade->upgraded_id = $upgraded_id;                    $upgrade->package_amount = $package_amount;                    $upgrade->roi_amount = $roi_amount;                    $upgrade->is_activated = 1;                    $upgrade->status = 0;                    if ($upgradesTable->save($upgrade)) {                        $upgrade_table_id = $upgrade->id;                        $userInfo = $usersTable->get($upgraded_id);                        $userInfo->status = 1;                        if ($usersTable->save($userInfo)) {                            $conditions = ["Users.id" => $upgraded_id];                            $userData = $usersTable                                ->find("all", [                                    "conditions" => $conditions                                ])                                ->enableAutoFields(true)                                ->first();                            $userDataSave = $usersTable->get($upgraded_id);                            $userDataSave->total_self_business = $userDataSave->total_self_business + $package_bv;                            $usersTable->save($userDataSave);                            $usersTable->updateParentsOnPackageUpgrade($upgraded_id, $userData->parent_id, $package_bv);                            $usersTable->levelUp($upgraded_id);                            if (                                $userData->sponsor_id > 0 && isset($userData->sponsor_id)                            ) {                                $sponsorInfo = $usersTable                                    ->find("all", [                                        "conditions" => [                                            "Users.id" => $userData->sponsor_id,                                        ],                                    ])                                    ->enableAutoFields(true)                                    ->first();                                if (empty($sponsorInfo)) {                                    echo "Sponsor not found";                                    exit;                                }                                $sponsor = $usersTable->get($userData->sponsor_id);                                $sponsor->total_direct_business = $sponsor->total_direct_business + $package_bv;                                $sponsor->total_direct_active = (int) $sponsor->total_direct_active + 1;                                $usersTable->save($sponsor);                                $directAmount = ($package_bv * 5)/100;                                $remainingAmount = $payoutsTable->getRemainingAmount($userData->sponsor_id);                                $isDeactivate = 0;                                $payableDirectAmount = $directAmount;                                if($directAmount > $remainingAmount) {                                    $payableDirectAmount = $remainingAmount;                                    $isDeactivate = 1;                                }                                if ($sponsorInfo->status == 1) {                                    $payoutData =  $payoutsTable->newEmptyEntity();                                    $payoutData->upgraded_table_id = $upgrade_table_id;                                    $payoutData->upagraded_user_id = $userData->sponsor_id;                                    $payoutData->direct_amount = $payableDirectAmount;                                    $payoutData->tax = 5;                                    $payoutData->admin_commission = 5;                                    $payoutsTable->save($payoutData);                                    if ($isDeactivate) {                                        $payoutsTable->deactivePackages($userData->sponsor_id);                                    }                                }                                $usersTable->levelUp($userData->sponsor_id);                                $downlines = $downlinesTable->find('all', array('conditions' => array('Downlines.user_table_id' => $upgraded_id)))->enableAutoFields(true)->toArray();                                foreach($downlines as $downline){                                    $downlineInfo = $downlinesTable->get($downline->id);                                    $downlineInfo->total_join = $downline->total_join + $package_bv;                                    $downlineInfo->modified = date("Y-m-d H:i:s");                                    $downlinesTable->save($downlineInfo);                                }                            }                            $this->Flash->success(                                __("User has been activated successfully.")                            );                            return $this->redirect($this->backend_url.'/member/activate-user');                        }                    }                }            }        }    }    public function activateOldUser()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User Activation : Activate Old User";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $upgradesTable = TableRegistry::get("Upgrades");        $downlinesTable = TableRegistry::get("Downlines");        $commissionsTable = TableRegistry::get("Commissions");        $payoutsTable = TableRegistry::get("Payouts");        if ($this->request->is("post")) {            /*echo '<pre>';            print_r($this->request->getData());            exit;*/            $username = $this->request->getData()["Upgrade"]["username"] ? $this->request->getData()["Upgrade"]["username"] : '';            $sponsor_name = $this->request->getData()["Upgrade"]["sponsor_name"] ? $this->request->getData()["Upgrade"]["sponsor_name"] : '';            $package_amount = $this->request->getData()["Upgrade"]["package_amount"] ? $this->request->getData()["Upgrade"]["package_amount"] : '';            $created = $this->request->getData()["Upgrade"]["created"] ? $this->request->getData()["Upgrade"]["created"] : '';            if (                $username && $sponsor_name && $package_amount && $created            ) {                $conditions =  ['Users.username' => $username];                $userInfo = $usersTable->find('all', array('conditions' => $conditions))->enableAutoFields(true)->first();                $upgraded_id = $userInfo->id;                $user_id = $this->adminUser->id;                $package_bv = $package_amount;                $conditions =  ['Upgrades.upgraded_id' => $upgraded_id, 'Upgrades.is_activated' => 1];                $checkActivated = $upgradesTable->find('all', array('conditions' => $conditions))->count();                                $strtoTimeCreated = strtotime($created);                if ($checkActivated > 0){                    $this->Flash->error(__("Sorry! selected user is already activated."));                } elseif (strtotime($userInfo->created) > $strtoTimeCreated){                    $this->Flash->error(__("Sorry! Activation date can not be less than registration date."));                }                 else {                    $upgrade = $upgradesTable->newEmptyEntity();                    $upgrade->upgraded_by = $user_id;                    $upgrade->upgraded_id = $upgraded_id;                    $upgrade->package_amount = $package_amount;                    $upgrade->is_activated = 1;                    $upgrade->status = 0;                    $upgrade->created = date("Y-m-d H:i:s", $strtoTimeCreated);                    $upgrade->modified = date("Y-m-d H:i:s", $strtoTimeCreated);                                        if ($upgradesTable->save($upgrade)) {                        $upgrade_table_id = $upgrade->id;                        $userInfo = $usersTable->get($upgraded_id);                        $userInfo->status = 1;                        if ($usersTable->save($userInfo)) {                            $conditions = ["Users.id" => $upgraded_id];                            $userData = $usersTable                                ->find("all", [                                    "conditions" => $conditions                                ])                                ->enableAutoFields(true)                                ->first();                            $userDataSave = $usersTable->get($upgraded_id);                            $userDataSave->total_self_business = $userDataSave->total_self_business + $package_bv;                            $usersTable->save($userDataSave);                            $usersTable->updateParentsOnPackageUpgrade($upgraded_id, $userData->parent_id, $package_bv);                            $usersTable->levelUp($upgraded_id);                            if (                                $userData->sponsor_id > 0 && isset($userData->sponsor_id)                            ) {                                $sponsorInfo = $usersTable                                    ->find("all", [                                        "conditions" => [                                            "Users.id" => $userData->sponsor_id,                                        ],                                    ])                                    ->enableAutoFields(true)                                    ->first();                                if (empty($sponsorInfo)) {                                    echo "Sponsor not found";                                    exit;                                }                                $sponsor = $usersTable->get($userData->sponsor_id);                                $sponsor->total_direct_business = $sponsor->total_direct_business + $package_bv;                                $sponsor->total_direct_active = (int) $sponsor->total_direct_active + 1;                                $usersTable->save($sponsor);                                $directAmount = ($package_bv * 5)/100;                                $remainingAmount = $payoutsTable->getRemainingAmount($userData->sponsor_id);                                $isDeactivate = 0;                                $payableDirectAmount = $directAmount;                                if($directAmount > $remainingAmount) {                                    $payableDirectAmount = $remainingAmount;                                    $isDeactivate = 1;                                }                                $payoutData =  $payoutsTable->newEmptyEntity();                                $payoutData->upgraded_table_id = $upgrade_table_id;                                $payoutData->upagraded_user_id = $userData->sponsor_id;                                $payoutData->direct_amount = $payableDirectAmount;                                $payoutData->tax = 5;                                $payoutData->admin_commission = 5;                                $payoutsTable->save($payoutData);                                if ($isDeactivate) {                                    $payoutsTable->deactivePackages($userData->sponsor_id);                                }                                $usersTable->levelUp($userData->sponsor_id);                                $downlines = $downlinesTable->find('all', array('conditions' => array('Downlines.user_table_id' => $upgraded_id)))->enableAutoFields(true)->toArray();                                foreach($downlines as $downline){                                    $downlineInfo = $downlinesTable->get($downline->id);                                    $downlineInfo->total_join = $downline->total_join + $package_bv;                                    $downlineInfo->modified = date("Y-m-d H:i:s");                                    $downlinesTable->save($downlineInfo);                                }                            }                            $this->Flash->success(                                __("User has been activated successfully.")                            );                            return $this->redirect($this->backend_url.'/member/activate-old-user');                        }                    }                }            }        }    }    public function upgradeUser()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User Activation : Upgrade User";        $this->set("title", $title);        $usersTable = TableRegistry::get("Users");        $upgradesTable = TableRegistry::get("Upgrades");        $downlinesTable = TableRegistry::get("Downlines");        $commissionsTable = TableRegistry::get("Commissions");        $payoutsTable = TableRegistry::get("Payouts");        $roisTable = TableRegistry::get("Rois");        $userId = $_GET['user_id'] ?? '';        $userData = [];        if ($userId) {            $conditions = ['Users.id' => $userId];            $userData = $usersTable->find('all', ['conditions' => $conditions])->enableAutoFields(true)->first();        }        $this->set('userData', $userData);        $conditions = ['Rois.status' => 1];        $order = ['Rois.id' => 'DESC'];        $rois = $roisTable->find('all', ['conditions' => $conditions, 'order' => $order])->enableAutoFields(true)->toArray();        $this->set('rois', $rois);        if ($this->request->is("post")) {            /*echo '<pre>';            print_r($this->request->getData());            exit;*/            $username = $this->request->getData()["Upgrade"]["username"] ? $this->request->getData()["Upgrade"]["username"] : '';            $sponsor_name = $this->request->getData()["Upgrade"]["sponsor_name"] ? $this->request->getData()["Upgrade"]["sponsor_name"] : '';            $package_amount = $this->request->getData()["Upgrade"]["package_amount"] ? $this->request->getData()["Upgrade"]["package_amount"] : '';            $roi_amount = $this->request->getData()["Upgrade"]["roi_amount"] ? $this->request->getData()["Upgrade"]["roi_amount"] : '';            if (                $username && $sponsor_name && $package_amount && $roi_amount            ) {                $conditions =  ['Users.username' => $username];                $userInfo = $usersTable->find('all', array('conditions' => $conditions))->enableAutoFields(true)->first();                $upgraded_id = $userInfo->id;                $user_id = $this->adminUser->id;                $package_bv = $package_amount;                $upgrade = $upgradesTable->newEmptyEntity();                $upgrade->upgraded_by = $user_id;                $upgrade->upgraded_id = $upgraded_id;                $upgrade->package_amount = $package_amount;                $upgrade->roi_amount = $roi_amount;                $upgrade->status = 0;                if ($upgradesTable->save($upgrade)) {                    $upgrade_table_id = $upgrade->id;                    $userInfo = $usersTable->get($upgraded_id);                    $userInfo->status = 1;                    if ($usersTable->save($userInfo)) {                        $conditions = ["Users.id" => $upgraded_id];                        $userData = $usersTable                            ->find("all", [                                "conditions" => $conditions                            ])                            ->enableAutoFields(true)                            ->first();                        $userDataSave = $usersTable->get($upgraded_id);                        $userDataSave->total_self_business = $userDataSave->total_self_business + $package_bv;                        $usersTable->save($userDataSave);                        $usersTable->updateParentsOnPackageUpgrade($upgraded_id, $userData->parent_id, $package_bv, 1);                        $usersTable->levelUp($upgraded_id);                        if (                            $userData->sponsor_id > 0 && isset($userData->sponsor_id)                        ) {                            $sponsorInfo = $usersTable                                ->find("all", [                                    "conditions" => [                                        "Users.id" => $userData->sponsor_id,                                    ],                                ])                                ->enableAutoFields(true)                                ->first();                            if (empty($sponsorInfo)) {                                echo "Sponsor not found";                                exit;                            }                            $sponsor = $usersTable->get($userData->sponsor_id);                            $sponsor->total_direct_business = $sponsor->total_direct_business + $package_bv;                            //$sponsor->total_direct_active = (int) $sponsor->total_direct_active + 1;                            $usersTable->save($sponsor);                            $directAmount = ($package_bv * 5)/100;                            $remainingAmount = $payoutsTable->getRemainingAmount($userData->sponsor_id);                            $isDeactivate = 0;                            $payableDirectAmount = $directAmount;                            if($directAmount > $remainingAmount) {                                $payableDirectAmount = $remainingAmount;                                $isDeactivate = 1;                            }                            if ($sponsorInfo->status == 1) {                                $payoutData =  $payoutsTable->newEmptyEntity();                                $payoutData->upgraded_table_id = $upgrade_table_id;                                $payoutData->upagraded_user_id = $userData->sponsor_id;                                $payoutData->direct_amount = $payableDirectAmount;                                $payoutData->tax = 5;                                $payoutData->admin_commission = 5;                                $payoutsTable->save($payoutData);                                if ($isDeactivate) {                                    $payoutsTable->deactivePackages($userData->sponsor_id);                                }                            }                            $usersTable->levelUp($userData->sponsor_id);                            $downlines = $downlinesTable->find('all', array('conditions' => array('Downlines.user_table_id' => $upgraded_id)))->enableAutoFields(true)->toArray();                            foreach($downlines as $downline){                                $downlineInfo = $downlinesTable->get($downline->id);                                $downlineInfo->total_join = $downline->total_join + $package_bv;                                $downlineInfo->modified = date("Y-m-d H:i:s");                                $downlinesTable->save($downlineInfo);                            }                        }                        $this->Flash->success(                            __("User has been upgraded successfully.")                        );                        return $this->redirect($this->backend_url.'/member/upgrade-user');                    }                }            }        }    }    public function activationHistory()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User Activation : Activation History";        $this->set("title", $title);        $upgradesTable = TableRegistry::get("Upgrades");        $join = [            [                "table" => "users",                "alias" => "Users",                "type" => "INNER",                "conditions" => ["Users.id = Upgrades.upgraded_id"],            ],            [                "table" => "users",                "alias" => "UpgradedBy",                "type" => "INNER",                "conditions" => ["UpgradedBy.id = Upgrades.upgraded_by"],            ]        ];        $conditions =  ['Upgrades.is_activated' => 1];        $fields = ['Users.username', 'UpgradedBy.username'];        $upgrades = $upgradesTable->find('all', array('fields' => $fields, 'join' => $join, 'conditions' => $conditions))->enableAutoFields(true)->toArray();        $this->set('upgrades', $upgrades);    }    public function upgradeHistory()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User Activation : Upgrade History";        $this->set("title", $title);        $upgradesTable = TableRegistry::get("Upgrades");        $join = [            [                "table" => "users",                "alias" => "Users",                "type" => "INNER",                "conditions" => ["Users.id = Upgrades.upgraded_id"],            ],            [                "table" => "users",                "alias" => "UpgradedBy",                "type" => "INNER",                "conditions" => ["UpgradedBy.id = Upgrades.upgraded_by"],            ]        ];        $conditions =  ['Upgrades.is_activated IS NULL'];        $fields = ['Users.username', 'UpgradedBy.username'];        $upgrades = $upgradesTable->find('all', array('fields' => $fields, 'join' => $join, 'conditions' => $conditions))->enableAutoFields(true)->toArray();        $this->set('upgrades', $upgrades);    }    public function userEarningDetails()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " User Activation : User Earning Details";        $this->set("title", $title);        $payoutsTable = TableRegistry::get("Payouts");        $payouts = [];        if (isset($_GET['username']) && $_GET['username']) {            $username = trim($_GET['username']);            $join = [                [                    "table" => "users",                    "alias" => "Users",                    "type" => "INNER",                    "conditions" => ["Users.id = Payouts.user_id AND Users.username = '".$username."'"],                ]            ];            $conditions =  [];            $fields = ['Users.username'];            $order = ['Payouts.created' => 'DESC'];            $payouts = $payoutsTable->find('all', array('fields' => $fields, 'join' => $join, 'conditions' => $conditions))->enableAutoFields(true)->toArray();        }        $this->set('payouts', $payouts);    }    public function salaryBonus()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Salary Bonus";        $this->set("title", $title);        $payoutsTable = TableRegistry::get("Payouts");        $usersTable = TableRegistry::get("Users");        if ($this->request->is("post")) {           $username = $this->request->getData()['Payout']['username'] ?? '';           $salary_bonus = $this->request->getData()['Payout']['salary_bonus'] ?? '';           $remark = $this->request->getData()['Payout']['remark'] ?? '';           if (                $username && $salary_bonus && $remark            ) {                $conditions = ["Users.username" => $username];                $fields = ['Users.id'];                $userData = $usersTable->find("all", ["fields" => $fields, "conditions" => $conditions])->first();                if ($userData) {                    $payout = $payoutsTable->newEmptyEntity();                    $payout->upagraded_user_id = $userData->id;                    $payout->salary_bonus = $salary_bonus;                    $payout->remark = nl2br($remark);                    $payout->tax = 5;                    $payout->admin_commission = 5;                    if ($payoutsTable->save($payout)) {                        $this->Flash->success(__("Salary bonus has been added successfully."));                        return $this->redirect($this->backend_url.'/member/salary-bonus');                    }                }            } else {                $this->Flash->error(__("Fields marked with * are mandatory."));            }        }    }    public function royaltyBonus()    {        if (!$this->request->getSession()->check("adminUserId")) {            return $this->redirect($this->backend_url.'/user/login');        }        $prefix_title = $this->backendTitle;        $title = $prefix_title . " Rayalty Bonus";        $this->set("title", $title);        $payoutsTable = TableRegistry::get("Payouts");        $usersTable = TableRegistry::get("Users");        if ($this->request->is("post")) {           /*echo '<pre>';           print_r($this->request->getData());           exit;*/           $monthly_business = $this->request->getData()['Payout']['monthly_business'] ?? '';           $amount = $this->request->getData()['Payout']['amount'] ?? '';           $remark = $this->request->getData()['Payout']['remark'] ?? '';           if (                $monthly_business && $amount && $remark            ) {                $join = [                            [                                "table" => "payouts",                                "alias" => "Payouts",                                "type" => "INNER",                                "conditions" => ["Payouts.upagraded_user_id = Users.id AND Directs.status = 1"],                            ]                        ];                $conditions = ["Users.is_level_up" => 1];                $fields = ['Users.id'];                $users = $usersTable->find("all", ["fields" => $fields, "conditions" => $conditions])                ->select([                    'totalRoyaltyCount' => '(SELECT COUNT(p.id) FROM payouts p WHERE p.upagraded_user_id = Users.id AND p.royalty_amount > 0)'                ])->toArray();                if ($users) {                    $totalUsers = 0;                    $eligibleIds = [];                    foreach($users as $userInfo) {                        if ($userInfo->totalRoyaltyCount < 12) {                            $totalUsers = $totalUsers + 1;                            $eligibleIds[] = $userInfo->id;                        }                    }                    if ($totalUsers > 0 && $eligibleIds) {                        $royaltyAmount = $amount/$totalUsers;                        foreach ($eligibleIds as $eligibleId) {                            $remainingAmount = $payoutsTable->getRemainingAmount($eligibleId);                            $isDeactivate = 0;                            $payableroyaltyAmount = $royaltyAmount;                            if($directAmount > $remainingAmount) {                                $payableroyaltyAmount = $remainingAmount;                                $isDeactivate = 1;                            }                            $payout = $payoutsTable->newEmptyEntity();                            $payout->upagraded_user_id = $eligibleId;                            $payout->monthly_business = $monthly_business;                            $payout->royalty_amount = $payableroyaltyAmount;                            $payout->remark = nl2br($remark);                            $payout->tax = 5;                            $payout->admin_commission = 5;                            $payoutsTable->save($payout);                             if ($isDeactivate) {                                $payoutsTable->deactivePackages($eligibleId);                            }                        }                        $this->Flash->success(__("Royalty bonus has been distributed successfully."));                        return $this->redirect($this->backend_url.'/member/royalty-bonus');                    }                }                $this->Flash->error(__("No users are eligible to get royalty bonus."));            } else {                $this->Flash->error(__("Fields marked with * are mandatory."));            }        }    }}